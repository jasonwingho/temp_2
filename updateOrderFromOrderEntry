/**
 * Updates an Order object based on another Order from a transaction log entry
 * 
 * @param target The Order to update
 * @param source The source Order from the entry
 * @param entry The transaction log entry (for additional data)
 */
private void updateOrderFromOrderEntry(Order target, Order source, TransactionLogEntry entry) {
    String orderId = target.getOrderID();
    String state = entry.getState();
    String sourceTopicName = entry.getSource();
    
    LOGGER.debug("Updating order {} from Order entry with state {}", orderId, state);
    
    // Update order state if entry is from RECALL/TO/OMS
    if (recallToOmsTopicName.equals(sourceTopicName)) {
        // We only handle Order objects here for states other than PendingFill and DoneForDay
        // PendingFill and DoneForDay from RECALL/TO/OMS are handled in updateOrderFromExecutionReport
        if (!"PendingFill".equals(state) && !"DoneOfDay".equals(state)) {
            OrderState newState = OrderState.valueOf(state);
            LOGGER.debug("Updating order {} state to {} from RECALL/TO/OMS entry", orderId, newState);
            target.setCurrentState(newState);
        }
    }
    
    // For PendingReplace or PendingCancel, update or create AmendRequest
    if ("PendingReplace".equals(state) || "PendingCancel".equals(state)) {
        if (source.getAmendRequest() != null) {
            LOGGER.debug("Updating AmendRequest for order {} in {} state", orderId, state);
            AmendRequest srcAmend = source.getAmendRequest();
            AmendRequest targetAmend = new AmendRequest(
                srcAmend.getOrderQty(),
                srcAmend.getPrice(),
                srcAmend.getClOrdID(),
                srcAmend.getOrigClOrdID()
            );
            target.setAmendRequest(targetAmend);
        } else if (target.getAmendRequest() == null) {
            LOGGER.debug("Creating new AmendRequest for order {} in {} state", orderId, state);
            String newId = UUID.randomUUID().toString();
            AmendRequest amendRequest = new AmendRequest(
                entry.getRecallQty(),
                entry.getFillPrice(),
                newId,
                orderId
            );
            target.setAmendRequest(amendRequest);
        }
    }
}

/**
 * Updates an Order object based on an ExecutionReport from a transaction log entry
 * 
 * @param order The Order to update
 * @param report The ExecutionReport from the entry
 * @param entry The transaction log entry (for additional data)
 */
private void updateOrderFromExecutionReport(Order order, ExecutionReport report, TransactionLogEntry entry) {
    String orderId = order.getOrderID();
    String state = entry.getState();
    String sourceTopicName = entry.getSource();
    
    LOGGER.debug("Updating order {} from ExecutionReport entry with state {}", orderId, state);
    
    // Update order state based on source topic
    if (omsToRecallTopicName.equals(sourceTopicName)) {
        // For OMS/TO/RECALL
        OrderState newState = OrderState.valueOf(state);
        LOGGER.debug("Updating order {} state to {} from OMS/TO/RECALL entry", orderId, newState);
        order.setCurrentState(newState);
    } else if (recallToOmsTopicName.equals(sourceTopicName)) {
        // For RECALL/TO/OMS topic - handle PendingFill and DoneForDay states
        if ("PendingFill".equals(state) || "DoneOfDay".equals(state)) {
            OrderState newState = OrderState.valueOf(state);
            LOGGER.debug("Updating order {} state to {} from RECALL/TO/OMS entry", orderId, newState);
            order.setCurrentState(newState);
        }
    }
    
    // Handle PendingFill state from RECALL/TO/OMS
    if (recallToOmsTopicName.equals(sourceTopicName) && "PendingFill".equals(state)) {
        LOGGER.debug("Processing PendingFill ExecutionReport from RECALL/TO/OMS for order {}", orderId);
        
        if (order.getFillRequest() == null) {
            // Create new FillRequest
            ExecutionReport newReport = new ExecutionReport();
            
            // Copy fields from the source report
            newReport.setExecID(report.getExecID());
            newReport.setExecType(report.getExecType());
            newReport.setClOrdID(report.getClOrdID() != null ? report.getClOrdID() : order.getClOrdID());
            newReport.setOrderID(report.getOrderID() != null ? report.getOrderID() : order.getOrderID());
            newReport.setOrigClOrdID(report.getOrigClOrdID() != null ? report.getOrigClOrdID() : order.getOrigClOrdID());
            newReport.setLastQty(report.getLastQty());
            newReport.setCumQty(report.getCumQty());
            newReport.setLeavesQty(report.getLeavesQty());
            newReport.setLastPrice(report.getLastPrice());
            newReport.setAvgPrice(report.getAvgPrice());
            newReport.setOrderState(report.getOrderState());
            newReport.setCurrency(report.getCurrency() != null ? report.getCurrency() : order.getCurrency());
            newReport.setSide(report.getSide() != null ? report.getSide() : order.getSide());
            newReport.setSymbol(report.getSymbol() != null ? report.getSymbol() : order.getSymbol());
            newReport.setTransactTime(report.getTransactTime());
            newReport.setSendingTime(report.getSendingTime());
            
            order.setFillRequest(newReport);
        } else {
            // Update existing report
            ExecutionReport existingReport = order.getFillRequest();
            if (report.getExecID() != null) existingReport.setExecID(report.getExecID());
            if (report.getExecType() != null) existingReport.setExecType(report.getExecType());
            if (report.getLastQty() > 0) existingReport.setLastQty(report.getLastQty());
            if (report.getCumQty() > 0) existingReport.setCumQty(report.getCumQty());
            if (report.getLeavesQty() >= 0) existingReport.setLeavesQty(report.getLeavesQty());
            if (report.getLastPrice() > 0) existingReport.setLastPrice(report.getLastPrice());
            if (report.getAvgPrice() > 0) existingReport.setAvgPrice(report.getAvgPrice());
            if (report.getOrderState() != null) existingReport.setOrderState(report.getOrderState());
            if (report.getTransactTime() != null) existingReport.setTransactTime(report.getTransactTime());
            if (report.getSendingTime() != null) existingReport.setSendingTime(report.getSendingTime());
        }
    }
    
    // Handle responses from OMS/TO/RECALL topic with Filled or PartiallyFilled states
    if (omsToRecallTopicName.equals(sourceTopicName) && 
        ("Filled".equals(state) || "PartiallyFilled".equals(state))) {
        
        LOGGER.debug("Updating ExecutionReport for order {} in {} state from OMS/TO/RECALL", orderId, state);
        
        ExecutionReport existingReport = order.getFillRequest();
        if (existingReport == null) {
            // Create new ExecutionReport
            ExecutionReport newReport = new ExecutionReport();
            
            // Copy fields from the source report
            newReport.setExecID(report.getExecID());
            newReport.setExecType(report.getExecType());
            newReport.setClOrdID(report.getClOrdID() != null ? report.getClOrdID() : order.getClOrdID());
            newReport.setOrderID(report.getOrderID() != null ? report.getOrderID() : order.getOrderID());
            newReport.setOrigClOrdID(report.getOrigClOrdID() != null ? report.getOrigClOrdID() : order.getOrigClOrdID());
            newReport.setLastQty(report.getLastQty());
            newReport.setCumQty(report.getCumQty());
            newReport.setLeavesQty(report.getLeavesQty());
            newReport.setLastPrice(report.getLastPrice());
            newReport.setAvgPrice(report.getAvgPrice());
            newReport.setOrderState(report.getOrderState());
            newReport.setCurrency(report.getCurrency() != null ? report.getCurrency() : order.getCurrency());
            newReport.setSide(report.getSide() != null ? report.getSide() : order.getSide());
            newReport.setSymbol(report.getSymbol() != null ? report.getSymbol() : order.getSymbol());
            newReport.setTransactTime(report.getTransactTime());
            newReport.setSendingTime(report.getSendingTime());
            
            order.setFillRequest(newReport);
        } else {
            // Update fields in existing report
            if (report.getExecID() != null) existingReport.setExecID(report.getExecID());
            if (report.getExecType() != null) existingReport.setExecType(report.getExecType());
            if (report.getLastQty() > 0) existingReport.setLastQty(report.getLastQty());
            if (report.getCumQty() > 0) existingReport.setCumQty(report.getCumQty());
            if (report.getLeavesQty() >= 0) existingReport.setLeavesQty(report.getLeavesQty());
            if (report.getLastPrice() > 0) existingReport.setLastPrice(report.getLastPrice());
            if (report.getAvgPrice() > 0) existingReport.setAvgPrice(report.getAvgPrice());
            if (report.getOrderState() != null) existingReport.setOrderState(report.getOrderState());
            if (report.getTransactTime() != null) existingReport.setTransactTime(report.getTransactTime());
            if (report.getSendingTime() != null) existingReport.setSendingTime(report.getSendingTime());
        }
    }
}
